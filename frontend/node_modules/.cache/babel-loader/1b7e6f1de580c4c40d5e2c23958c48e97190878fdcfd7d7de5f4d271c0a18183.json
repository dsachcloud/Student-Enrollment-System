{"ast":null,"code":"import api from './api';\nconst ENDPOINT = '/courses';\nconst STORAGE_KEY = 'mock_courses';\n\n// Initialize mock data if not already in localStorage\nconst initializeMockData = () => {\n  if (!localStorage.getItem(STORAGE_KEY)) {\n    const initialCourses = [{\n      id: 1,\n      code: 'CSE101',\n      name: 'Introduction to Computer Science',\n      department: 'Computer Science',\n      credits: 3,\n      status: 'ACTIVE'\n    }, {\n      id: 2,\n      code: 'MTH201',\n      name: 'Differential Calculus',\n      department: 'Mathematics',\n      credits: 4,\n      status: 'ACTIVE'\n    }, {\n      id: 3,\n      code: 'ENG105',\n      name: 'Indian Literature',\n      department: 'English',\n      credits: 3,\n      status: 'ACTIVE'\n    }, {\n      id: 4,\n      code: 'BIO110',\n      name: 'Biodiversity of India',\n      department: 'Biology',\n      credits: 4,\n      status: 'ACTIVE'\n    }, {\n      id: 5,\n      code: 'HIS100',\n      name: 'Indian History and Culture',\n      department: 'History',\n      credits: 3,\n      status: 'INACTIVE'\n    }];\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(initialCourses));\n  }\n};\n\n// Helper to get courses from localStorage\nconst getMockCourses = () => {\n  initializeMockData();\n  return JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\n};\n\n// Helper to save courses to localStorage\nconst saveMockCourses = courses => {\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(courses));\n};\n\n// Fetch all courses\nexport const getCourses = async () => {\n  try {\n    // For now, return mock data from localStorage\n    return getMockCourses();\n\n    // Uncomment when backend is ready\n    // const response = await api.get(ENDPOINT);\n    // return response.data;\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n// Fetch a course by ID\nexport const getCourseById = async id => {\n  try {\n    // Get course from localStorage\n    const courses = getMockCourses();\n    const course = courses.find(c => c.id === parseInt(id));\n    if (course) {\n      // Add additional details not stored in the list view\n      return {\n        ...course,\n        description: course.description || 'An introductory course covering programming fundamentals, algorithms, and computational thinking with focus on Indian tech industry requirements.',\n        capacity: course.capacity || 30,\n        enrolledStudents: course.enrolledStudents || 22,\n        instructor: course.instructor || 'Dr. Rajesh Khanna',\n        schedule: course.schedule || 'Mon, Wed, Fri 10:00 AM - 11:15 AM',\n        location: course.location || 'Science Block, Room 101',\n        prerequisites: course.prerequisites || ['None'],\n        startDate: course.startDate || '2023-07-15',\n        endDate: course.endDate || '2023-11-30'\n      };\n    }\n    throw new Error(`Course with ID ${id} not found`);\n\n    // Uncomment when backend is ready\n    // const response = await api.get(`${ENDPOINT}/${id}`);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error fetching course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Create a new course\nexport const createCourse = async courseData => {\n  try {\n    // Get current courses\n    const courses = getMockCourses();\n\n    // Create new course with ID\n    const newCourse = {\n      ...courseData,\n      id: Math.max(0, ...courses.map(c => c.id)) + 1\n    };\n\n    // Add to courses and save\n    courses.push(newCourse);\n    saveMockCourses(courses);\n    console.log('Created course:', newCourse);\n    return newCourse;\n\n    // Uncomment when backend is ready\n    // const response = await api.post(ENDPOINT, courseData);\n    // return response.data;\n  } catch (error) {\n    console.error('Error creating course:', error);\n    throw error;\n  }\n};\n\n// Update a course\nexport const updateCourse = async (id, courseData) => {\n  try {\n    // Get current courses\n    const courses = getMockCourses();\n    const courseIndex = courses.findIndex(c => c.id === parseInt(id));\n    if (courseIndex === -1) {\n      throw new Error(`Course with ID ${id} not found`);\n    }\n\n    // Update course\n    const updatedCourse = {\n      ...courseData,\n      id: parseInt(id)\n    };\n    courses[courseIndex] = updatedCourse;\n\n    // Save updated courses\n    saveMockCourses(courses);\n    console.log(`Updated course ${id}:`, updatedCourse);\n    return updatedCourse;\n\n    // Uncomment when backend is ready\n    // const response = await api.put(`${ENDPOINT}/${id}`, courseData);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error updating course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a course\nexport const deleteCourse = async id => {\n  try {\n    // Get current courses\n    const courses = getMockCourses();\n    const filteredCourses = courses.filter(c => c.id !== parseInt(id));\n\n    // Save filtered courses\n    saveMockCourses(filteredCourses);\n    console.log(`Deleted course ${id}`);\n    return true;\n\n    // Uncomment when backend is ready\n    // await api.delete(`${ENDPOINT}/${id}`);\n    // return true;\n  } catch (error) {\n    console.error(`Error deleting course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Get students enrolled in a course\nexport const getStudentsByCourseId = async courseId => {\n  try {\n    // Mock data for now\n    const mockStudents = [{\n      id: 1,\n      firstName: 'Rahul',\n      lastName: 'Sharma',\n      email: 'rahul.sharma@example.com'\n    }, {\n      id: 2,\n      firstName: 'Priya',\n      lastName: 'Patel',\n      email: 'priya.patel@example.com'\n    }, {\n      id: 3,\n      firstName: 'Arjun',\n      lastName: 'Singh',\n      email: 'arjun.singh@example.com'\n    }];\n    return mockStudents;\n\n    // Uncomment when backend is ready\n    // const response = await api.get(`${ENDPOINT}/${courseId}/students`);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error fetching students for course ${courseId}:`, error);\n    return [];\n  }\n};","map":{"version":3,"names":["api","ENDPOINT","STORAGE_KEY","initializeMockData","localStorage","getItem","initialCourses","id","code","name","department","credits","status","setItem","JSON","stringify","getMockCourses","parse","saveMockCourses","courses","getCourses","error","console","getCourseById","course","find","c","parseInt","description","capacity","enrolledStudents","instructor","schedule","location","prerequisites","startDate","endDate","Error","createCourse","courseData","newCourse","Math","max","map","push","log","updateCourse","courseIndex","findIndex","updatedCourse","deleteCourse","filteredCourses","filter","getStudentsByCourseId","courseId","mockStudents","firstName","lastName","email"],"sources":["D:/Godot/student enrollment/student-enrollment-system/frontend/src/services/courseService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst ENDPOINT = '/courses';\r\nconst STORAGE_KEY = 'mock_courses';\r\n\r\n// Initialize mock data if not already in localStorage\r\nconst initializeMockData = () => {\r\n  if (!localStorage.getItem(STORAGE_KEY)) {\r\n    const initialCourses = [\r\n      { id: 1, code: 'CSE101', name: 'Introduction to Computer Science', department: 'Computer Science', credits: 3, status: 'ACTIVE' },\r\n      { id: 2, code: 'MTH201', name: 'Differential Calculus', department: 'Mathematics', credits: 4, status: 'ACTIVE' },\r\n      { id: 3, code: 'ENG105', name: 'Indian Literature', department: 'English', credits: 3, status: 'ACTIVE' },\r\n      { id: 4, code: 'BIO110', name: 'Biodiversity of India', department: 'Biology', credits: 4, status: 'ACTIVE' },\r\n      { id: 5, code: 'HIS100', name: 'Indian History and Culture', department: 'History', credits: 3, status: 'INACTIVE' },\r\n    ];\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(initialCourses));\r\n  }\r\n};\r\n\r\n// Helper to get courses from localStorage\r\nconst getMockCourses = () => {\r\n  initializeMockData();\r\n  return JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');\r\n};\r\n\r\n// Helper to save courses to localStorage\r\nconst saveMockCourses = (courses) => {\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(courses));\r\n};\r\n\r\n// Fetch all courses\r\nexport const getCourses = async () => {\r\n  try {\r\n    // For now, return mock data from localStorage\r\n    return getMockCourses();\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(ENDPOINT);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching courses:', error);\r\n    return []; // Return empty array instead of throwing to prevent UI crashes\r\n  }\r\n};\r\n\r\n// Fetch a course by ID\r\nexport const getCourseById = async (id) => {\r\n  try {\r\n    // Get course from localStorage\r\n    const courses = getMockCourses();\r\n    const course = courses.find(c => c.id === parseInt(id));\r\n    \r\n    if (course) {\r\n      // Add additional details not stored in the list view\r\n      return {\r\n        ...course,\r\n        description: course.description || 'An introductory course covering programming fundamentals, algorithms, and computational thinking with focus on Indian tech industry requirements.',\r\n        capacity: course.capacity || 30,\r\n        enrolledStudents: course.enrolledStudents || 22,\r\n        instructor: course.instructor || 'Dr. Rajesh Khanna',\r\n        schedule: course.schedule || 'Mon, Wed, Fri 10:00 AM - 11:15 AM',\r\n        location: course.location || 'Science Block, Room 101',\r\n        prerequisites: course.prerequisites || ['None'],\r\n        startDate: course.startDate || '2023-07-15',\r\n        endDate: course.endDate || '2023-11-30'\r\n      };\r\n    }\r\n    \r\n    throw new Error(`Course with ID ${id} not found`);\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(`${ENDPOINT}/${id}`);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching course ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new course\r\nexport const createCourse = async (courseData) => {\r\n  try {\r\n    // Get current courses\r\n    const courses = getMockCourses();\r\n    \r\n    // Create new course with ID\r\n    const newCourse = {\r\n      ...courseData,\r\n      id: Math.max(0, ...courses.map(c => c.id)) + 1\r\n    };\r\n    \r\n    // Add to courses and save\r\n    courses.push(newCourse);\r\n    saveMockCourses(courses);\r\n    \r\n    console.log('Created course:', newCourse);\r\n    return newCourse;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.post(ENDPOINT, courseData);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating course:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a course\r\nexport const updateCourse = async (id, courseData) => {\r\n  try {\r\n    // Get current courses\r\n    const courses = getMockCourses();\r\n    const courseIndex = courses.findIndex(c => c.id === parseInt(id));\r\n    \r\n    if (courseIndex === -1) {\r\n      throw new Error(`Course with ID ${id} not found`);\r\n    }\r\n    \r\n    // Update course\r\n    const updatedCourse = { ...courseData, id: parseInt(id) };\r\n    courses[courseIndex] = updatedCourse;\r\n    \r\n    // Save updated courses\r\n    saveMockCourses(courses);\r\n    \r\n    console.log(`Updated course ${id}:`, updatedCourse);\r\n    return updatedCourse;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.put(`${ENDPOINT}/${id}`, courseData);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error updating course ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a course\r\nexport const deleteCourse = async (id) => {\r\n  try {\r\n    // Get current courses\r\n    const courses = getMockCourses();\r\n    const filteredCourses = courses.filter(c => c.id !== parseInt(id));\r\n    \r\n    // Save filtered courses\r\n    saveMockCourses(filteredCourses);\r\n    \r\n    console.log(`Deleted course ${id}`);\r\n    return true;\r\n    \r\n    // Uncomment when backend is ready\r\n    // await api.delete(`${ENDPOINT}/${id}`);\r\n    // return true;\r\n  } catch (error) {\r\n    console.error(`Error deleting course ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get students enrolled in a course\r\nexport const getStudentsByCourseId = async (courseId) => {\r\n  try {\r\n    // Mock data for now\r\n    const mockStudents = [\r\n      { id: 1, firstName: 'Rahul', lastName: 'Sharma', email: 'rahul.sharma@example.com' },\r\n      { id: 2, firstName: 'Priya', lastName: 'Patel', email: 'priya.patel@example.com' },\r\n      { id: 3, firstName: 'Arjun', lastName: 'Singh', email: 'arjun.singh@example.com' },\r\n    ];\r\n    \r\n    return mockStudents;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(`${ENDPOINT}/${courseId}/students`);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching students for course ${courseId}:`, error);\r\n    return [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}