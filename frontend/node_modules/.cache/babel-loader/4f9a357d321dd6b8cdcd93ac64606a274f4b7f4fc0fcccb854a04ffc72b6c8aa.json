{"ast":null,"code":"import api from './api';\nconst ENDPOINT = '/courses';\n\n// Fetch all courses\nexport const getCourses = async () => {\n  try {\n    // For now, return mock data since the backend may not be ready\n    const mockCourses = [{\n      id: 1,\n      code: 'CS101',\n      name: 'Introduction to Computer Science',\n      department: 'Computer Science',\n      credits: 3,\n      status: 'ACTIVE'\n    }, {\n      id: 2,\n      code: 'MTH201',\n      name: 'Calculus I',\n      department: 'Mathematics',\n      credits: 4,\n      status: 'ACTIVE'\n    }, {\n      id: 3,\n      code: 'ENG105',\n      name: 'English Composition',\n      department: 'English',\n      credits: 3,\n      status: 'ACTIVE'\n    }, {\n      id: 4,\n      code: 'BIO110',\n      name: 'General Biology',\n      department: 'Biology',\n      credits: 4,\n      status: 'ACTIVE'\n    }, {\n      id: 5,\n      code: 'HIS100',\n      name: 'World History',\n      department: 'History',\n      credits: 3,\n      status: 'INACTIVE'\n    }];\n    return mockCourses;\n\n    // Uncomment when backend is ready\n    // const response = await api.get(ENDPOINT);\n    // return response.data;\n  } catch (error) {\n    console.error('Error fetching courses:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n// Fetch a course by ID\nexport const getCourseById = async id => {\n  try {\n    // For now, return mock data\n    const mockCourse = {\n      id: id,\n      code: 'CS101',\n      name: 'Introduction to Computer Science',\n      description: 'An introductory course covering programming fundamentals, algorithms, and computational thinking.',\n      department: 'Computer Science',\n      credits: 3,\n      capacity: 30,\n      enrolledStudents: 22,\n      status: 'ACTIVE',\n      instructor: 'Dr. Alan Turing',\n      schedule: 'Mon, Wed, Fri 10:00 AM - 11:15 AM',\n      location: 'Building A, Room 101',\n      prerequisites: ['None'],\n      startDate: '2023-09-05',\n      endDate: '2023-12-18'\n    };\n    return mockCourse;\n\n    // Uncomment when backend is ready\n    // const response = await api.get(`${ENDPOINT}/${id}`);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error fetching course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Create a new course\nexport const createCourse = async courseData => {\n  try {\n    // For mock purposes, just log and return the data with an ID\n    console.log('Creating course with data:', courseData);\n    return {\n      ...courseData,\n      id: Math.floor(Math.random() * 1000) + 10\n    };\n\n    // Uncomment when backend is ready\n    // const response = await api.post(ENDPOINT, courseData);\n    // return response.data;\n  } catch (error) {\n    console.error('Error creating course:', error);\n    throw error;\n  }\n};\n\n// Update a course\nexport const updateCourse = async (id, courseData) => {\n  try {\n    // For mock purposes, just log and return the updated data\n    console.log(`Updating course ${id} with data:`, courseData);\n    return {\n      ...courseData,\n      id\n    };\n\n    // Uncomment when backend is ready\n    // const response = await api.put(`${ENDPOINT}/${id}`, courseData);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error updating course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a course\nexport const deleteCourse = async id => {\n  try {\n    // For mock purposes, just log the deletion\n    console.log(`Deleting course ${id}`);\n    return true;\n\n    // Uncomment when backend is ready\n    // await api.delete(`${ENDPOINT}/${id}`);\n    // return true;\n  } catch (error) {\n    console.error(`Error deleting course ${id}:`, error);\n    throw error;\n  }\n};\n\n// Get students enrolled in a course\nexport const getStudentsByCourseId = async courseId => {\n  try {\n    // Mock data for now\n    const mockStudents = [{\n      id: 1,\n      firstName: 'John',\n      lastName: 'Doe',\n      email: 'john.doe@example.com'\n    }, {\n      id: 2,\n      firstName: 'Jane',\n      lastName: 'Smith',\n      email: 'jane.smith@example.com'\n    }, {\n      id: 3,\n      firstName: 'Michael',\n      lastName: 'Johnson',\n      email: 'michael.j@example.com'\n    }];\n    return mockStudents;\n\n    // Uncomment when backend is ready\n    // const response = await api.get(`${ENDPOINT}/${courseId}/students`);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error fetching students for course ${courseId}:`, error);\n    return [];\n  }\n};","map":{"version":3,"names":["api","ENDPOINT","getCourses","mockCourses","id","code","name","department","credits","status","error","console","getCourseById","mockCourse","description","capacity","enrolledStudents","instructor","schedule","location","prerequisites","startDate","endDate","createCourse","courseData","log","Math","floor","random","updateCourse","deleteCourse","getStudentsByCourseId","courseId","mockStudents","firstName","lastName","email"],"sources":["D:/Godot/student enrollment/student-enrollment-system/frontend/src/services/courseService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst ENDPOINT = '/courses';\r\n\r\n// Fetch all courses\r\nexport const getCourses = async () => {\r\n  try {\r\n    // For now, return mock data since the backend may not be ready\r\n    const mockCourses = [\r\n      { id: 1, code: 'CS101', name: 'Introduction to Computer Science', department: 'Computer Science', credits: 3, status: 'ACTIVE' },\r\n      { id: 2, code: 'MTH201', name: 'Calculus I', department: 'Mathematics', credits: 4, status: 'ACTIVE' },\r\n      { id: 3, code: 'ENG105', name: 'English Composition', department: 'English', credits: 3, status: 'ACTIVE' },\r\n      { id: 4, code: 'BIO110', name: 'General Biology', department: 'Biology', credits: 4, status: 'ACTIVE' },\r\n      { id: 5, code: 'HIS100', name: 'World History', department: 'History', credits: 3, status: 'INACTIVE' },\r\n    ];\r\n    \r\n    return mockCourses;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(ENDPOINT);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching courses:', error);\r\n    return []; // Return empty array instead of throwing to prevent UI crashes\r\n  }\r\n};\r\n\r\n// Fetch a course by ID\r\nexport const getCourseById = async (id) => {\r\n  try {\r\n    // For now, return mock data\r\n    const mockCourse = {\r\n      id: id,\r\n      code: 'CS101',\r\n      name: 'Introduction to Computer Science',\r\n      description: 'An introductory course covering programming fundamentals, algorithms, and computational thinking.',\r\n      department: 'Computer Science',\r\n      credits: 3,\r\n      capacity: 30,\r\n      enrolledStudents: 22,\r\n      status: 'ACTIVE',\r\n      instructor: 'Dr. Alan Turing',\r\n      schedule: 'Mon, Wed, Fri 10:00 AM - 11:15 AM',\r\n      location: 'Building A, Room 101',\r\n      prerequisites: ['None'],\r\n      startDate: '2023-09-05',\r\n      endDate: '2023-12-18'\r\n    };\r\n    \r\n    return mockCourse;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(`${ENDPOINT}/${id}`);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching course ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new course\r\nexport const createCourse = async (courseData) => {\r\n  try {\r\n    // For mock purposes, just log and return the data with an ID\r\n    console.log('Creating course with data:', courseData);\r\n    return { ...courseData, id: Math.floor(Math.random() * 1000) + 10 };\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.post(ENDPOINT, courseData);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating course:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a course\r\nexport const updateCourse = async (id, courseData) => {\r\n  try {\r\n    // For mock purposes, just log and return the updated data\r\n    console.log(`Updating course ${id} with data:`, courseData);\r\n    return { ...courseData, id };\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.put(`${ENDPOINT}/${id}`, courseData);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error updating course ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a course\r\nexport const deleteCourse = async (id) => {\r\n  try {\r\n    // For mock purposes, just log the deletion\r\n    console.log(`Deleting course ${id}`);\r\n    return true;\r\n    \r\n    // Uncomment when backend is ready\r\n    // await api.delete(`${ENDPOINT}/${id}`);\r\n    // return true;\r\n  } catch (error) {\r\n    console.error(`Error deleting course ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get students enrolled in a course\r\nexport const getStudentsByCourseId = async (courseId) => {\r\n  try {\r\n    // Mock data for now\r\n    const mockStudents = [\r\n      { id: 1, firstName: 'John', lastName: 'Doe', email: 'john.doe@example.com' },\r\n      { id: 2, firstName: 'Jane', lastName: 'Smith', email: 'jane.smith@example.com' },\r\n      { id: 3, firstName: 'Michael', lastName: 'Johnson', email: 'michael.j@example.com' },\r\n    ];\r\n    \r\n    return mockStudents;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(`${ENDPOINT}/${courseId}/students`);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching students for course ${courseId}:`, error);\r\n    return [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}