{"ast":null,"code":"import api from './api';\nconst ENDPOINT = '/departments';\n\n// Fetch all departments\nexport const getDepartments = async () => {\n  try {\n    // For now, return mock data since the backend may not be ready\n    const mockDepartments = [{\n      id: 1,\n      name: 'Computer Science',\n      head: 'Dr. Alan Turing',\n      foundedYear: 1985,\n      status: 'ACTIVE',\n      studentsCount: 120,\n      coursesCount: 15\n    }, {\n      id: 2,\n      name: 'Mathematics',\n      head: 'Dr. Ada Lovelace',\n      foundedYear: 1950,\n      status: 'ACTIVE',\n      studentsCount: 85,\n      coursesCount: 12\n    }, {\n      id: 3,\n      name: 'Physics',\n      head: 'Dr. Richard Feynman',\n      foundedYear: 1960,\n      status: 'ACTIVE',\n      studentsCount: 65,\n      coursesCount: 10\n    }, {\n      id: 4,\n      name: 'Biology',\n      head: 'Dr. Jane Goodall',\n      foundedYear: 1970,\n      status: 'ACTIVE',\n      studentsCount: 90,\n      coursesCount: 14\n    }, {\n      id: 5,\n      name: 'History',\n      head: 'Dr. Howard Zinn',\n      foundedYear: 1955,\n      status: 'INACTIVE',\n      studentsCount: 40,\n      coursesCount: 8\n    }, {\n      id: 6,\n      name: 'English',\n      head: 'Dr. Maya Angelou',\n      foundedYear: 1965,\n      status: 'ACTIVE',\n      studentsCount: 75,\n      coursesCount: 9\n    }];\n    return mockDepartments;\n\n    // Uncomment when backend is ready\n    // const response = await api.get(ENDPOINT);\n    // return response.data;\n  } catch (error) {\n    console.error('Error fetching departments:', error);\n    return []; // Return empty array instead of throwing to prevent UI crashes\n  }\n};\n\n// Fetch a department by ID\nexport const getDepartmentById = async id => {\n  try {\n    // For now, return mock data\n    const mockDepartment = {\n      id: id,\n      name: 'Computer Science',\n      head: 'Dr. Alan Turing',\n      description: 'Department focused on computer science, software engineering, and related disciplines.',\n      foundedYear: 1985,\n      location: 'Building A, Floor 3',\n      status: 'ACTIVE',\n      budget: 500000,\n      email: 'cs@university.edu',\n      phone: '(123) 456-7890',\n      courses: [{\n        id: 1,\n        code: 'CS101',\n        name: 'Introduction to Computer Science',\n        credits: 3\n      }, {\n        id: 2,\n        code: 'CS201',\n        name: 'Data Structures',\n        credits: 4\n      }, {\n        id: 3,\n        code: 'CS301',\n        name: 'Algorithms',\n        credits: 4\n      }],\n      faculty: [{\n        id: 1,\n        name: 'Dr. Alan Turing',\n        position: 'Department Head',\n        email: 'turing@university.edu'\n      }, {\n        id: 2,\n        name: 'Dr. Grace Hopper',\n        position: 'Professor',\n        email: 'hopper@university.edu'\n      }, {\n        id: 3,\n        name: 'Dr. John von Neumann',\n        position: 'Associate Professor',\n        email: 'neumann@university.edu'\n      }]\n    };\n    return mockDepartment;\n\n    // Uncomment when backend is ready\n    // const response = await api.get(`${ENDPOINT}/${id}`);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error fetching department ${id}:`, error);\n    throw error;\n  }\n};\n\n// Create a new department\nexport const createDepartment = async departmentData => {\n  try {\n    // For mock purposes, just log and return the data with an ID\n    console.log('Creating department with data:', departmentData);\n    return {\n      ...departmentData,\n      id: Math.floor(Math.random() * 1000) + 10\n    };\n\n    // Uncomment when backend is ready\n    // const response = await api.post(ENDPOINT, departmentData);\n    // return response.data;\n  } catch (error) {\n    console.error('Error creating department:', error);\n    throw error;\n  }\n};\n\n// Update a department\nexport const updateDepartment = async (id, departmentData) => {\n  try {\n    // For mock purposes, just log and return the updated data\n    console.log(`Updating department ${id} with data:`, departmentData);\n    return {\n      ...departmentData,\n      id\n    };\n\n    // Uncomment when backend is ready\n    // const response = await api.put(`${ENDPOINT}/${id}`, departmentData);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error updating department ${id}:`, error);\n    throw error;\n  }\n};\n\n// Delete a department\nexport const deleteDepartment = async id => {\n  try {\n    // For mock purposes, just log the deletion\n    console.log(`Deleting department ${id}`);\n    return true;\n\n    // Uncomment when backend is ready\n    // await api.delete(`${ENDPOINT}/${id}`);\n    // return true;\n  } catch (error) {\n    console.error(`Error deleting department ${id}:`, error);\n    throw error;\n  }\n};\n\n// Get courses in a department\nexport const getCoursesByDepartmentId = async departmentId => {\n  try {\n    // Mock data for now\n    const mockCourses = [{\n      id: 1,\n      code: 'CS101',\n      name: 'Introduction to Computer Science',\n      credits: 3\n    }, {\n      id: 2,\n      code: 'CS201',\n      name: 'Data Structures',\n      credits: 4\n    }, {\n      id: 3,\n      code: 'CS301',\n      name: 'Algorithms',\n      credits: 4\n    }];\n    return mockCourses;\n\n    // Uncomment when backend is ready\n    // const response = await api.get(`${ENDPOINT}/${departmentId}/courses`);\n    // return response.data;\n  } catch (error) {\n    console.error(`Error fetching courses for department ${departmentId}:`, error);\n    return [];\n  }\n};","map":{"version":3,"names":["api","ENDPOINT","getDepartments","mockDepartments","id","name","head","foundedYear","status","studentsCount","coursesCount","error","console","getDepartmentById","mockDepartment","description","location","budget","email","phone","courses","code","credits","faculty","position","createDepartment","departmentData","log","Math","floor","random","updateDepartment","deleteDepartment","getCoursesByDepartmentId","departmentId","mockCourses"],"sources":["D:/Godot/student enrollment/student-enrollment-system/frontend/src/services/departmentService.js"],"sourcesContent":["import api from './api';\r\n\r\nconst ENDPOINT = '/departments';\r\n\r\n// Fetch all departments\r\nexport const getDepartments = async () => {\r\n  try {\r\n    // For now, return mock data since the backend may not be ready\r\n    const mockDepartments = [\r\n      { id: 1, name: 'Computer Science', head: 'Dr. Alan Turing', foundedYear: 1985, status: 'ACTIVE', studentsCount: 120, coursesCount: 15 },\r\n      { id: 2, name: 'Mathematics', head: 'Dr. Ada Lovelace', foundedYear: 1950, status: 'ACTIVE', studentsCount: 85, coursesCount: 12 },\r\n      { id: 3, name: 'Physics', head: 'Dr. Richard Feynman', foundedYear: 1960, status: 'ACTIVE', studentsCount: 65, coursesCount: 10 },\r\n      { id: 4, name: 'Biology', head: 'Dr. Jane Goodall', foundedYear: 1970, status: 'ACTIVE', studentsCount: 90, coursesCount: 14 },\r\n      { id: 5, name: 'History', head: 'Dr. Howard Zinn', foundedYear: 1955, status: 'INACTIVE', studentsCount: 40, coursesCount: 8 },\r\n      { id: 6, name: 'English', head: 'Dr. Maya Angelou', foundedYear: 1965, status: 'ACTIVE', studentsCount: 75, coursesCount: 9 },\r\n    ];\r\n    \r\n    return mockDepartments;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(ENDPOINT);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching departments:', error);\r\n    return []; // Return empty array instead of throwing to prevent UI crashes\r\n  }\r\n};\r\n\r\n// Fetch a department by ID\r\nexport const getDepartmentById = async (id) => {\r\n  try {\r\n    // For now, return mock data\r\n    const mockDepartment = {\r\n      id: id,\r\n      name: 'Computer Science',\r\n      head: 'Dr. Alan Turing',\r\n      description: 'Department focused on computer science, software engineering, and related disciplines.',\r\n      foundedYear: 1985,\r\n      location: 'Building A, Floor 3',\r\n      status: 'ACTIVE',\r\n      budget: 500000,\r\n      email: 'cs@university.edu',\r\n      phone: '(123) 456-7890',\r\n      courses: [\r\n        { id: 1, code: 'CS101', name: 'Introduction to Computer Science', credits: 3 },\r\n        { id: 2, code: 'CS201', name: 'Data Structures', credits: 4 },\r\n        { id: 3, code: 'CS301', name: 'Algorithms', credits: 4 },\r\n      ],\r\n      faculty: [\r\n        { id: 1, name: 'Dr. Alan Turing', position: 'Department Head', email: 'turing@university.edu' },\r\n        { id: 2, name: 'Dr. Grace Hopper', position: 'Professor', email: 'hopper@university.edu' },\r\n        { id: 3, name: 'Dr. John von Neumann', position: 'Associate Professor', email: 'neumann@university.edu' },\r\n      ]\r\n    };\r\n    \r\n    return mockDepartment;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(`${ENDPOINT}/${id}`);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching department ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new department\r\nexport const createDepartment = async (departmentData) => {\r\n  try {\r\n    // For mock purposes, just log and return the data with an ID\r\n    console.log('Creating department with data:', departmentData);\r\n    return { ...departmentData, id: Math.floor(Math.random() * 1000) + 10 };\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.post(ENDPOINT, departmentData);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error('Error creating department:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update a department\r\nexport const updateDepartment = async (id, departmentData) => {\r\n  try {\r\n    // For mock purposes, just log and return the updated data\r\n    console.log(`Updating department ${id} with data:`, departmentData);\r\n    return { ...departmentData, id };\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.put(`${ENDPOINT}/${id}`, departmentData);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error updating department ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete a department\r\nexport const deleteDepartment = async (id) => {\r\n  try {\r\n    // For mock purposes, just log the deletion\r\n    console.log(`Deleting department ${id}`);\r\n    return true;\r\n    \r\n    // Uncomment when backend is ready\r\n    // await api.delete(`${ENDPOINT}/${id}`);\r\n    // return true;\r\n  } catch (error) {\r\n    console.error(`Error deleting department ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get courses in a department\r\nexport const getCoursesByDepartmentId = async (departmentId) => {\r\n  try {\r\n    // Mock data for now\r\n    const mockCourses = [\r\n      { id: 1, code: 'CS101', name: 'Introduction to Computer Science', credits: 3 },\r\n      { id: 2, code: 'CS201', name: 'Data Structures', credits: 4 },\r\n      { id: 3, code: 'CS301', name: 'Algorithms', credits: 4 },\r\n    ];\r\n    \r\n    return mockCourses;\r\n    \r\n    // Uncomment when backend is ready\r\n    // const response = await api.get(`${ENDPOINT}/${departmentId}/courses`);\r\n    // return response.data;\r\n  } catch (error) {\r\n    console.error(`Error fetching courses for department ${departmentId}:`, error);\r\n    return [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}